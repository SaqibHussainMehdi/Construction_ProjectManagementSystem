// <auto-generated />
using System;
using Construction_Company.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Construction_Company.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230422184657_initializedDatabase")]
    partial class initializedDatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Construction_Company.Models.CustomerLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("customerLogins");
                });

            modelBuilder.Entity("Construction_Company.Models.Inquirey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Area")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<bool>("Finishing")
                        .HasColumnType("bit");

                    b.Property<int>("FinishingPerSqF")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<bool>("GreyStructure")
                        .HasColumnType("bit");

                    b.Property<int>("GreyStructurePerSqFt")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<bool>("HomeDrawing")
                        .HasColumnType("bit");

                    b.Property<int>("HomeDrawingPerSqFt")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("RatePerSqFt")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("customerLoginId")
                        .HasColumnType("int");

                    b.Property<int>("phaseId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerLoginId");

                    b.HasIndex("phaseId");

                    b.ToTable("inquireys");
                });

            modelBuilder.Entity("Construction_Company.Models.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("Paid")
                        .HasColumnType("int");

                    b.Property<string>("PayDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<int>("projectAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("projectAssignmentId");

                    b.ToTable("payments");
                });

            modelBuilder.Entity("Construction_Company.Models.Phase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("PhaseDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RatePerUnit")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("phases");
                });

            modelBuilder.Entity("Construction_Company.Models.ProjectAssignment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("TargetDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("customerLoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerLoginId");

                    b.ToTable("ProjectAssignments");
                });

            modelBuilder.Entity("Construction_Company.Models.ProjectStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("CompPercent")
                        .HasMaxLength(100)
                        .HasColumnType("int");

                    b.Property<int>("projectAssignmentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("projectAssignmentId");

                    b.ToTable("projectStatuses");
                });

            modelBuilder.Entity("Construction_Company.Models.Receipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectAssignmentId")
                        .HasColumnType("int");

                    b.Property<string>("ReceiptDescr")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("RecoverAmount")
                        .HasColumnType("int");

                    b.Property<int>("customerLoginId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectAssignmentId");

                    b.HasIndex("customerLoginId");

                    b.ToTable("receipts");
                });

            modelBuilder.Entity("Construction_Company.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("userTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("userTypeId");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Construction_Company.Models.UserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("TypeDesc")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("userTypes");
                });

            modelBuilder.Entity("Construction_Company.Models.Inquirey", b =>
                {
                    b.HasOne("Construction_Company.Models.CustomerLogin", "customerLogin")
                        .WithMany("inquireys")
                        .HasForeignKey("customerLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Construction_Company.Models.Phase", "phase")
                        .WithMany("inquireys")
                        .HasForeignKey("phaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerLogin");

                    b.Navigation("phase");
                });

            modelBuilder.Entity("Construction_Company.Models.Payment", b =>
                {
                    b.HasOne("Construction_Company.Models.ProjectAssignment", "projectAssignment")
                        .WithMany("payments")
                        .HasForeignKey("projectAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("projectAssignment");
                });

            modelBuilder.Entity("Construction_Company.Models.ProjectAssignment", b =>
                {
                    b.HasOne("Construction_Company.Models.CustomerLogin", "customerLogin")
                        .WithMany("projectAssignments")
                        .HasForeignKey("customerLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerLogin");
                });

            modelBuilder.Entity("Construction_Company.Models.ProjectStatus", b =>
                {
                    b.HasOne("Construction_Company.Models.ProjectAssignment", "projectAssignment")
                        .WithMany("projectStatuses")
                        .HasForeignKey("projectAssignmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("projectAssignment");
                });

            modelBuilder.Entity("Construction_Company.Models.Receipt", b =>
                {
                    b.HasOne("Construction_Company.Models.ProjectAssignment", null)
                        .WithMany("receipts")
                        .HasForeignKey("ProjectAssignmentId");

                    b.HasOne("Construction_Company.Models.CustomerLogin", "customerLogin")
                        .WithMany("receipts")
                        .HasForeignKey("customerLoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("customerLogin");
                });

            modelBuilder.Entity("Construction_Company.Models.User", b =>
                {
                    b.HasOne("Construction_Company.Models.UserType", "userType")
                        .WithMany("users")
                        .HasForeignKey("userTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("userType");
                });

            modelBuilder.Entity("Construction_Company.Models.CustomerLogin", b =>
                {
                    b.Navigation("inquireys");

                    b.Navigation("projectAssignments");

                    b.Navigation("receipts");
                });

            modelBuilder.Entity("Construction_Company.Models.Phase", b =>
                {
                    b.Navigation("inquireys");
                });

            modelBuilder.Entity("Construction_Company.Models.ProjectAssignment", b =>
                {
                    b.Navigation("payments");

                    b.Navigation("projectStatuses");

                    b.Navigation("receipts");
                });

            modelBuilder.Entity("Construction_Company.Models.UserType", b =>
                {
                    b.Navigation("users");
                });
#pragma warning restore 612, 618
        }
    }
}
